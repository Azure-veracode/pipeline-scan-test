# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java
# This is an example of using VeraDemo Java test application with the Veracode Static Pipeline scanner.  A Veracode subscription is required.
trigger:
- main
pool:
  vmImage: 'ubuntu-latest'
steps:
- task: Bash@3
  displayName: 'Install Veracode CLI and Package Source Code'
  inputs:
    targetType: 'inline'
    script: |
      # Install Veracode CLI
      echo "Installing Veracode CLI..."
      curl -fsS https://tools.veracode.com/veracode-cli/install | sh

      # Add Veracode CLI to PATH
      export PATH="$PATH:$HOME/.veracode"

      # Verify installation
      which veracode || { echo "Veracode CLI not found in PATH."; exit 1; }
      veracode --version || { echo "Veracode CLI installation failed."; exit 1; }

      # Define the output directory for packaging
      OUTPUT_DIR=$(Build.ArtifactStagingDirectory)/veracode_package
      echo "Using output directory: $OUTPUT_DIR"

      # Create the output directory if it doesn't exist
      mkdir -p $OUTPUT_DIR

      # Navigate to the source code directory
      cd $(Build.SourcesDirectory)

      # Package the source code using Veracode CLI
      veracode package -s $(Build.SourcesDirectory) -t directory -o $OUTPUT_DIR

      # Check if the output directory contains the package
      if [ -z "$(ls -A $OUTPUT_DIR)" ]; then
        echo "Packaging failed. No files were generated."
        exit 1
      fi

      echo "Packaging completed. Files saved to: $OUTPUT_DIR"  
  env: 
      VERACODE_API_KEY_ID: 'd2f6be6ae1c926f405a7b86a079947d'
      VERACODE_API_KEY_SECRET: '9a4a8bb4a88b4950dc3b5d118f9125a0e3c1e80be7964cbe04fbeceb7dfc3c51b018c0d3e882d69b2828b66a444abce2c15fd28e0081a53a89cfeafd7be27e96'

# Step 2: Publish Packaged Files as Build Artifacts
- task: Bash@3
  displayName: Veracode Pipeline
  inputs:
    targetType: 'inline'
    script: |
      # Step 1: Download the Veracode pipeline scanner
      curl -sSO https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
      
      # Step 2: Unzip the scanner
      unzip -o pipeline-scan-LATEST.zip

      # Step 3: Navigate to the directory containing the packaged files
      cd $(Build.ArtifactStagingDirectory)

      # Step 4: Run the pipeline scan on all packaged files
      for file in $(find . -type f); do
        echo "Scanning file: $file"
        java -jar pipeline-scan.jar \
          -vid 'd2f6be6ae1c926f405a7b86a079947d0' \
          -vkey '9a4a8bb4a88b4950dc3b5d118f9125a0e3c1e80be7964cbe04fbeceb7dfc3c51b018c0d3e882d69b2828b66a444abce2c15fd28e0081a53a89cfeafd7be27e96' \
          -f "$file" || true
      done
- publish: $(System.DefaultWorkingDirectory)/results.json
  artifact: VeracodeBaseline
