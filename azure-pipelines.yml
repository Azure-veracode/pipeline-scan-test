# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java
# This is an example of using VeraDemo Java test application with the Veracode Static Pipeline scanner.  A Veracode trigger:
trigger:
- main
pool:
  vmImage: 'ubuntu-latest'
steps:
- task: CmdLine@2
  displayName: Veracode static scan
  inputs:
      script: |
        curl -fsS https://tools.veracode.com/veracode-cli/install | sh
        ./veracode package --source $(Build.SourcesDirectory) --output $(Build.ArtifactStagingDirectory)/verascan --trust
        ./veracode static scan $(Build.ArtifactStagingDirectory)/verascan/verademo.war
  env: 
      VERACODE_API_KEY_ID: 'd2f6be6ae1c926f405a7b86a079947d'
      VERACODE_API_KEY_SECRET: '9a4a8bb4a88b4950dc3b5d118f9125a0e3c1e80be7964cbe04fbeceb7dfc3c51b018c0d3e882d69b2828b66a444abce2c15fd28e0081a53a89cfeafd7be27e96'


# Step 2: Publish Packaged Files as Build Artifacts
- task: Bash@3
  displayName: Veracode Pipeline
  inputs:
    targetType: 'inline'
    script: |
      # Step 1: Download the Veracode pipeline scanner
      curl -sSO https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
      
      # Step 2: Unzip the scanner
      unzip -o pipeline-scan-LATEST.zip

      # Step 3: Navigate to the directory containing the packaged files
      cd $(Build.ArtifactStagingDirectory)

      # Step 4: Run the pipeline scan on all packaged files
      for file in $(find . -type f); do
        echo "Scanning file: $file"
        java -jar pipeline-scan.jar \
          -vid 'd2f6be6ae1c926f405a7b86a079947d0' \
          -vkey '9a4a8bb4a88b4950dc3b5d118f9125a0e3c1e80be7964cbe04fbeceb7dfc3c51b018c0d3e882d69b2828b66a444abce2c15fd28e0081a53a89cfeafd7be27e96' \
          -f "$file" || true
      done
- publish: $(System.DefaultWorkingDirectory)/results.json
  artifact: VeracodeBaseline