trigger:
- main

pool:
  vmImage: 'ubuntu-latest'


steps:

# - task: Bash@3
#   displayName: 'Install Veracode CLI and Package Scan'
#   inputs:
#     targetType: 'inline'
#     script: |
#       curl -fsS https://tools.veracode.com/veracode-cli/install | sh
#       ./veracode package -das $(Build.SourcesDirectory) --output ./verascan

#       # Check if the verascan directory exists
#       if [ ! -d "verascan" ]; then
#         echo "Error: verascan directory not found."
#         exit 1
#       fi

# - task: PublishBuildArtifacts@1
#   displayName: 'Publish Verascan Artifact'
#   inputs:
#     pathToPublish: 'verascan'
#     artifactName: 'verascan'

- task: Maven@3
  inputs:
    mavenPomFile: 'app/pom.xml'
    mavenOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.8'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    goals: 'package'

- task: VeracodePipelineScan@0
  inputs:
    authenticationMethod: 'UsernamePassword'
    fileToScan: 'app/target/verademo.war'
    breakPipeline: false
    baselineFileGeneration: true
    baselineFileStorageProject: 'Azure-veracode'
    baselineFileStorageReponame: 'Azure-veracode/pipeline-scan-test'
    baselineFileStorageBranch: 'main'
    baselineFileOptions: 'filtered'
  condition:
      succeededOrFailed()

- task: CmdLine@2
  name: ExtractMitigations
  env:
    VERACODE_API_KEY_ID: $(vid)
    VERACODE_API_KEY_SECRET: $(vkey)
  inputs:
    script: |
      git clone https://github.com/cadonuno/veracode-pipeline-mitigation
      pip install -r ./veracode-pipeline-mitigation/requirements.txt
      python ./veracode-pipeline-mitigation/vcpipemit.py -an "Recent" -rf pipeline.json -of "toCompare.json"

- task: CmdLine@2
  name: CompareResultsAndFailBuild
  inputs:
    script: |
      git clone https://github.com/cadonuno/PipelineResultsCompare
      pip install -r ./PipelineResultsCompare/requirements.txt
      python ./PipelineResultsCompare/pipeline_results_compare.py -of "filtered_pipeline_results.json" -br pipeline.json -ff "toCompare.json" --fail_on_severity "Very High, High"

- task: PublishBuildArtifacts@1
  condition:
      succeededOrFailed()
  inputs:
    pathToPublish: 'pipeline.json'
    artifactName: results
    
- task: PublishBuildArtifacts@1
  condition:
      succeededOrFailed()
  inputs:
    pathToPublish: 'toCompare.json'
    artifactName: results
    

- task: CmdLine@2
  name: SaveResultsAsJunitTestResults
  inputs:
    script: |
      echo Saving results as xml and html
      curl -sSO https://raw.githubusercontent.com/cadonuno/Pipeline2JUnitXml/master/pipeline2junitxml.py
      python pipeline2junitxml.py -f filtered_pipeline_results.json --xml_name PipelineScanJunit.xml
      echo Finished saving results
  condition:
      succeededOrFailed()

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: 'PipelineScanJunit.xml'
  condition:
      succeededOrFailed()